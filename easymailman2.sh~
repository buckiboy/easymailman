#!/bin/bash
# set -x                                
#################################################################################
#Mailspace management tool                                                      #
#Provides easy check of space, list archived mailboxes, restore and backup      #
#emails                                                                         #
#AUTHOR: Milan Bakos                                                            #
#Date: September 2014                                                           #
#Requires:restore-archived-email.pl, archive-mailbox.pl                         #
#Version=1.1                                                                    #  
#################################################################################
#################################################################################
# Variables used                                                                #
# originalpath, ticket, username, visp, tlk, pid, path, data, check_tty, mailbox#
# dest_path, path_dest,lpath,  sfolder, dfolder, copyfrompath,copytopath        #                                   
#################################################################################
clear
# Check master server
MASTERFILE=/share/admin/mailops/master
 if [ ! -f $MASTERFILE ]
  then
  echo "Unable to locate master check file"
  exit
 fi
MASTER=$(cat $MASTERFILE)
 if [ "$(hostname)" != "$MASTER" ]
 then
 echo "This is not the master server"
 exit
fi
originalpath=`pwd`;
now=`date`
################################################################################
# Function: check_space()                                                      #
# Function to get variables from input                                         #
# Function: check_space                                                        #
# Expects 3 variables: Ticket number, username and VISP                        #
################################################################################
function check_space()
{
  echo  "Insert values in the format, etc Ticket: 90534898 on folan (force9): "
  read data
  data=`echo $data | tr '[:upper:]' '[:lower:]'`
  ticket=`echo $data|awk '{print $2}'`
  username=`echo $data|awk '{print $4}'`
  visp=`echo $data|awk '{print $5}'| sed 's/(//g'|sed 's/)//g'| sed 's/\.//g'`
##################################################################################
# Error checking                                                                 #
# Check if ticket contains only numbers                                          #
# Expects only numbers                                                           #
# Returns error if other characters                                              #
##################################################################################
   if [ -z "$ticket" ] ;
    then
    echo " No ticket number present, please check your input"
    echo
    read -p "Please enter your ticket number: " ticket
   fi
    until [[ $ticket =~ ^[0-9]+$ ]]
    do
    echo "Ticket '$ticket' -- Ticket number is incorrect, please insert correct ticket number:"; read ticket; 
   done;
#################################################################################
# Error checking                                                                #
# Check if visp is correct                                                      #
# Allowed visps: plusnet,force9,freeonline,vodafone                             #
#################################################################################
  if [ -z "$visp" ] ;
    then
      echo "VISP is not set please insert VISP: "
      read visp
      visp=`echo $visp | tr '[:upper:]' '[:lower:]'`;
  fi
  until  [ $visp = "plusnet" ] || [ $visp = "force9" ] || [ $visp = "freeonline" ] || [ $visp = "vodafone" ]
    do
      echo "-- The visp is now set at $visp ---- "
      echo "Invalid VISP, valid VISPS are : plusnet, force9, freeonline, vodafone. Please type the correct VISP:"; read visp
      visp=`echo $visp | tr '[:upper:]' '[:lower:]'`;
  done;
###################################################################################
# Error checking                                                                  #     
# Check if username is empty                                                      #
# Asks for username until has a value                                             #
###################################################################################
  if [ -z "$username" ];
  then
    echo "Username is empty please insert: "
    read username;
  fi
   until [[ ! -z "$username" ]]
    do
    echo "username is empty. Please insert again"; read username; 
  done;
 
  username=`echo $username | tr '[:upper:]' '[:lower:]'`;
  tlk=`echo $username|cut -c 1,2`
  path=`echo "/share/isp/$visp/mail/$tlk/$username"`
  path_dest=`echo /share/isp/$visp/mail/$tlk/Destroyed`
} #End of check_space function
#################################################################################
# Function error_exit                                                           #
# Error checking                                                                #
# Stop on error function                                                        #
#################################################################################
function error_exit()
{
  echo "$1" 1>&2
  exit 1
}
#################################################################################
# Functior: error_path()                                                        #
# Error checking                                                                #
# Path error checked                                                            #
# Expects: valid path                                                           # 
# Returns: error if invalid                                                     #
#################################################################################
function error_path()
{
  if [ ! -d $path ];
  then
    error_exit "Path [$path] is invalid! Aborting"
  fi
}
#********************************************************************************
#* Spinner
#*
#*
function spinner()
{

pid2=$! # Process Id of the previous running command
          spin='-\|/'
          i=0
          while kill -0 $pid2 2>/dev/null
          do
          i=$(( (i+1) %4 ))
          printf " Working \r${spin:$i:1}"
          sleep .1
          done

}
#################################################################################
# Functior: error_path2()                                                       #
# Error checking                                                                #
# Path error checked                                                            #
# Expects: valid path                                                           #
# Returns: error if invalid                                                     #
#################################################################################
function error_path2()
{
  if [ ! -d $path2 ];
  then
    error_exit "Path [$path2] is invalid or there is no archive available! Aborting"
  fi
}
##################################################################################
# Self check if terminal session is still open                                   #
# Get self pid to check if terminal session is still open and kill itself if not #
# Expects: tty still active                                                      #
# Returns: nothing                                                               # 
##################################################################################
pid=$$;
echo "I am running as process $pid on this system."
#echo "Mailpolicing in progress - please do not use archive mailbox option at the moment"
################################################################################### 
# Create menu and offer choices                                                   #
# Options: Check size,List archive, Restore Archive, Archive Emails,Backup Emails #
#          Quit                                                                   #
###################################################################################
  while true
  do
  check_tty=`ps aux |grep $$ |grep -v grep|awk '{print $7}'`;
  if [ $check_tty != '?' ];
  then
    echo
    echo
    PS3='Please enter your choice: '
    options=("Check size" "List archive" "Restore Archive" "Archive Emails" "Date Removal" "Backup Emails" "Restore Destroyed" "Snapshot" "Quit")
    select opt in "${options[@]}"
      do
      case $opt in
      "Check size")
        echo "Check size of a mailbox"
        check_space;
        echo
        echo "Checking size of $path"
        sleep 1
        error_path;
        cd $path;
        echo "Size    Mailbox"
        echo "---------------------"
        du -h --ma 1  | sed 's/\.$/Total_Size/' | sed 's/.\/Maildir-//g' | sed 's/.\/Maildir/Default_Mailbox/g'|sort -hk1 -k2 &
        spinner;
        echo "---------------------"
        break
        ;;
      "List archive")
        echo "List available archives"
        check_space;
        path2=`echo "/local/archive/$visp/$tlk/$username"`
        error_path2;
        echo "Listing files in $path2"
        ls -larth --color $path2 &
        spinner;
        break
        ;;
      "Restore Archive")
        echo "Restore archived emails"
        check_space;
        path2=`echo "/local/archive/$visp/$tlk/$username"`
        error_path2;
        echo "Listing files in $path2"
        ls -larth --color $path2
        echo
        echo "Select archive to restore"
        read archive
            
        # Run external script   
        /usr/bin/restore-archived-email.pl -i $visp -u $username -a $archive -t $ticket &
        spinner;
        error_path;
        cd $path;
        echo $archive
        echo
        echo "Checking size of the directories. Please wait"
        echo "Size    Mailbox"
        echo "---------------------"
        du -h --ma 1  | sed 's/\.$/Total_Size/' | sed 's/.\/Maildir-//g' | sed 's/.\/Maildir/Default_Mailbox/g'|sort -hk1 -k2 &
        spinner;
        echo "---------------------"        
       
        ##################################################################################
        #Over usage 7 days removal                                                       #
        ##################################################################################
       
        NEW_DATE=$(date -d "+8 days")
        if echo $archive | grep --quiet OVERUSAGE
          then
          echo "Overusage archive detected"
          sleep 1
          echo "Do you want to add the user to the list of excluded users for 7 days? [Y,n]"
          
          read input
          if [[ $input == "Y" || $input == "y" ]]; then
            echo "$username, $visp, $now, $NEW_DATE" >> /var/tmp/easymailman_userlist.txt
            echo "$username has been added to the exclusion file"
            else
              echo
         
          fi
        
         else
            echo
  
        fi
        cd $originalpath /dev/null
        break
        ;;
      "Archive Emails")
        echo "Archive emails"     
        check_space;
        error_path;
        cd $path;
        du -h --ma 1| sed 's/\.\///g'|sort -hk1 -k2 &
        spinner;
        echo "Insert mailbox"
        read mailbox
        # Run external script
        /usr/bin/archive-mailbox.pl -user $username -isp $visp -mailbox $mailbox -reason OVERUSAGE  -remove &
        spinner;
        break
        ;;
       "Date Removal")
        echo "Remove emails older than x days"     
        check_space;
        error_path;
        cd $path;
        du -h --ma 1| sed 's/\.\///g'|sort -hk1 -k2 &
        spinner;
        echo "Insert mailbox"
        read mailbox
        cd $path/$mailbox/cur;
        error_path;
        total_files=`ls -1 | wc -l`   
        pwd
        echo "Delete emails older than : [days]"
          read dayz;
             #############################################################
             # Check $dayz is a number                                                #
             #                                                                                 #
             #############################################################
         until [[ $dayz =~ ^[0-9]+$ ]]
        do
         echo "Please insert number of dayz: [days]"; read dayz; 
        done;
       echo "Backing up live mailbox. Please wait"
         /usr/bin/archive-mailbox.pl -user $username -isp $visp -mailbox $mailbox -reason BACKUP -noremove &
         spinner;   
        echo "You have selected to remove emails older than $dayz days"
       # date_removal=`find . -type f -mtime +$dayz  -printf "%TY-%Tm-%Td %TH:%TM %f\n"`
       random_file=`echo "/var/tmp/easymailman_date_removal_$RANDOM.txt"`
        find . -type f -mtime +$dayz  -printf "%TY-%Tm-%Td %TH:%TM %f\n" | sort -rMk1 | tee $random_file
       
        date_removal=`cat $random_file`
        removed_files=`cat $random_file | wc -l`  
        if [ -z "$date_removal" ];
        then
        rm -f $random_file;
        error_exit "but I could not find any files that matched your request. Eeeeerrrrroorrrr. Quitting."
       
              else
           
            echo "I am going to remove" $removed_files "files from" `echo $path/$mailbox/cur`
            echo       
         rm -f $random_file;
         echo "Please confirm that you are happy to remove these files [Y,n]"
         read input_d
          if [[ $input_d == "Y" || $input_d == "y" ]]; then
            find . -type f -mtime +$dayz -print0  | xargs -0 -r -n 50 rm -f ;sleep 5 &
          spinner;
                 
            sleep 2
            echo "Completed."
            echo " If you have accidentally removed files, please restore from snapshot using options 8"
            else
              error_exit "Aborting action."
             
              fi
              cd   $path/$mailbox/cur;
         echo "Total amount of files before deletion: $total_files"
         echo "I have removed $removed_files files."
         echo "Amount of files left in the folder:" `ls -1 | wc -l`
         fi 
      
        break
        ;;
      "Backup Emails")
        echo "You chose to backup emails"
        check_space;
        error_path;
        cd $path;
        du -h --ma 1| sed 's/\.\///g'|sort -hk1 -k2 &
        spinner;
        echo "Insert mailbox"
        read mailbox;
        # Run external script
        /usr/bin/archive-mailbox.pl -user $username -isp $visp -mailbox $mailbox -reason BACKUP -noremove &
        spinner;
        break
        ;;
      "Restore Destroyed")
        echo "You have chosen to restore emails from destroyed folder";
        check_space;
        error_path;
            #Backup the mailbox first
        cd $path;
        live_username=`du -h --ma 1 --time | wc -l`
            if [ $live_username == 1 ];
          then
          echo "Cannot find any mailboxes for this user $username. Exiting";
          exit 1;   
            else        
              echo
              echo "Mailboxes on the live system"       
              du -h --ma 1 --time| sed 's/\.\///g'|sort -hk1 -k2 &
              spinner;
              echo "Select mailbox to backup"
              read mailbox;
                if [ -z "$mailbox" ];
            then
            echo "Mailbox is empty please select: "
            read mailbox;
             fi
            until [ ! -z "$mailbox" ]
                do
                echo "Mailbox is empty. Please insert again"; read mailbox; 
                done;         
          fi        
          # Run external script
         echo "Backing up live mailbox. Please wait"
         /usr/bin/archive-mailbox.pl -user $username -isp $visp -mailbox $mailbox -reason BACKUP -noremove &
         spinner;   
  
            #################################################################################
            # Error checking                                                                #
            # Path error checked                                                            #
            # Expects: valid path                                                           # 
            # Returns: error if invalid                                                     #
            #################################################################################
            #Check if directory is available in the destroyed folder   
            if [ ! -d $path_dest ];
              then
              error_exit "Path [$path_dest] is not available. Please check the details or there are no folders available"
            fi   
            cd $path_dest;
            dest_username=`du -h --ma 1 --time | grep "$username\+*" | wc -l`
            if [ $dest_username == 0 ];
            then
            echo "Cannot find destroyed folder for this use $username. Exiting";
            exit 1;   
            else
            du -h --ma 1 --time | sed -s 's/\.\///g'| grep "$username\+*"
            echo "Select folder you would like to restore or CTRL-C to quit"
            read sfolder;
            if [[ $? -ne 0 ]] ; then
            error_exit "Error occurred"
            fi
            fi
              ################################################################################
              # Error checking                                                               #
              # Check that mailbox is selected                                               #
              # Expects: valid directory                                                     # 
              # Returns: error if invalid                                                    #
              ################################################################################
              if [ ! -d $sfolder ];
              then
              error_exit "Path [$path_dest/$sfolder] is not available. Please check the details or there are no folders available"
              fi
              if [ -z "$sfolder" ];
              then
              echo "Destroyed folder is empty please select: "
              read sfolder;
              fi
              until [ ! -z "$sfolder" ]
              do
              echo "Destroyed mailbox is empty. Please insert again"; read sfolder; 
              done;
              ###################################################################################
              #translate destroyed folder to live maildirectory for validation                  #
              # Expects: valid mailbox                                                          #
              # Returns: Maildir or Maildir+$mailbox                                            #
              ###################################################################################
              if [[ "$sfolder" == *+* ]]; then
              dest_path=`echo $sfolder | tr _ ' ' | awk '{print $1}' | grep '+' | tr '+' ' ' | awk '{ print "Maildir-" $2 }'`
              if [ -z "$dest_path" ];
              then
              echo "Error with mailboxes. Please check your details. "
              error_exit;
              fi     
              echo "Mailbox name on the live system = " $dest_path
              else
              dest_path="Maildir"
              fi
              #################################################################################
              # Error checking                                                                #
              # Live System Path error checked                                                #
              # Expects: valid path                                                           # 
              # Returns: error if invalid                                                     #
              #################################################################################
              lpath=`echo /share/isp/$visp/mail/$tlk/$username`
              if [ ! -d $lpath ];
              then
              error_exit "Path [$lpath] is not available. Please check details"
              fi
              cd $lpath
              if [ ! -d $dest_path ];
              then
              error_exit "Mailbox [$lpath/$dest_path] is not available. Please check details"
              fi
              echo "We are going to copy emails from $path_dest/$sfolder to $lpath/$dest_path. Press Enter to confirm or CTRL-C to quit"
              read
              copyfrompath=`echo $path_dest/$sfolder`;
              copytopath=`echo $lpath/$dest_path`;
              cd $copyfrompath;
              if [ ! -d $copyfrompath ];
              then
              error_exit "Path [$copyfrompath] is not available. Please check details"
              fi
              cd $copyfrompath;
              #pwd
              #copy everything to $copytopath
              # echo cp -p -r * .??* $copytopath
              cp -p -r * .??* $copytopath &
              spinner;
              cd $lpath
              echo "I have finished copying the files to [$lpath/$dest_path]. Check the size below"
              echo
              echo "Size    Date              Mailbox"
              echo "---------------------------------------------------"   
              du -h --ma 1 --time | sort -h
              echo "---------------------------------------------------"
              echo
              echo "***Finished***"   
              break
                    ;;
              "Snapshot")
                 echo "You chose Snapshot"
                 check_space;
                 error_path;
              cd $path;
              Mymailvol=$( df . | grep /visp | awk '{print $5$6}' )
               echo "We are using $Mymailvol"
               echo ""
               Mylocalfiles=$(find . -type f | wc -l)      
               echo "The user : $username :  currently has $Mylocalfiles in their local directory "
               echo "Checking snapshot directories "
               #echo "Checking Nightly.0"
               #find $Mymailvol/.snapshot/nightly.0/$visp/$tlk/$username/ -type f | wc -l
               My_nightly0_res=$(find $Mymailvol/.snapshot/nightly.0/$visp/$tlk/$username/ -type f | wc -l)
               My_nightly0=($Mymailvol/.snapshot/nightly.0/$visp/$tlk/$username/)
               My_nightly0_res_c=$(echo $My_nightly0_res $My_nightly0)
               #echo "$My_nightly0"
              
             
               #echo "Checking Nightly.1"
               #find $Mymailvol/.snapshot/nightly.1/$visp/$tlk/$username/ -type f | wc -l
               My_nightly1_res=$(find $Mymailvol/.snapshot/nightly.1/$visp/$tlk/$username/ -type f | wc -l)
               My_nightly1=($Mymailvol/.snapshot/nightly.1/$visp/$tlk/$username/)
               My_nightly1_res_c=$(echo $My_nightly1_res $My_nightly1)
               #echo "$My_nightly1"
              
               #echo "Checking Nightly.2"
               #find $Mymailvol/.snapshot/nightly.2/$visp/$tlk/$username/ -type f | wc -l
               My_nightly2_res=$(find $Mymailvol/.snapshot/nightly.2/$visp/$tlk/$username/ -type f | wc -l)
               My_nightly2=($Mymailvol/.snapshot/nightly.2/$visp/$tlk/$username/)
               My_nightly2_res_c=$(echo $My_nightly2_res $My_nightly2)
               #echo "$My_nightly2"
         
               #echo "Checking Nightly.3"
               #find $Mymailvol/.snapshot/nightly.3/$visp/$tlk/$username/ -type f | wc -l
               My_nightly3=($Mymailvol/.snapshot/nightly.3/$visp/$tlk/$username/)
               My_nightly3_res=$(find $Mymailvol/.snapshot/nightly.3/$visp/$tlk/$username/ -type f | wc -l)
               My_nightly3_res_c=$(echo $My_nightly3_res $My_nightly3)
               #echo "$My_nightly3"
               #echo "Checking Nightly.4"
               #find $Mymailvol/.snapshot/nightly.4/$visp/$tlk/$username/ -type f | wc -l
               My_nightly4_res=$(find $Mymailvol/.snapshot/nightly.4/$visp/$tlk/$username/ -type f | wc -l)
               My_nightly4=($Mymailvol/.snapshot/nightly.4/$visp/$tlk/$username/)
               My_nightly4_res_c=$(echo $My_nightly4_res $My_nightly4)
               #echo "$My_nightly4"
               #echo "Checking Weekly.0"
               #find $Mymailvol/.snapshot/weekly.0/$visp/$tlk/$username/ -type f | wc -l
               My_weekly0_res=$(find $Mymailvol/.snapshot/weekly.0/$visp/$tlk/$username/ -type f | wc -l)
               My_weekly0=($Mymailvol/.snapshot/weekly.0/$visp/$tlk/$username/)
               My_weekly0_res_c=$(echo $My_weekly0_res $My_weekly0)
               #echo "$My_weekly0"
              
               array=("$My_nightly0_res_c" "$My_nightly1_res_c" "$My_nightly2_res_c" "$My_nightly3_res_c" "$My_nightly4_res_c" "$My_weekly0_res_c")
                 IFS=$'\n' sorted=($(sort -rn <<<"${array[*]}"))
                 printf "[%s]\n" "${sorted[@]}"
               # Select directory to restore
               echo "Select snapshot to restore from :"
               read selected_snapshot;
               echo "You have selected : $selected_snapshot"
               # backup live directory
               echo "Backing up all of the live mailboxes"
               mkdir -p /local/archive/$visp/$tlk/$username/
               cd $path
               pwd
               ls -d */ | cut -f1 -d'/' | while read line; do tar -czf /local/archive/$visp/$tlk/$username/$line-BACKUP_SNAPSHOT_`date +"-%H-%M-%d_%m_%y"`.tar $line/* ;done &
               spinner;
               echo       
               echo "Finished backing up"
               echo
               echo "Restoring files. Please wait"
               echo
               cd $selected_snapshot
               pwd
               echo
               tar cf - * | ( cd /share/isp/$visp/mail/$tlk/$username && tar xf - ) &
               spinner;
               
               echo
                echo " Finished restoring. Lets check the amount of files to confirm"
                sleep 1
                cd $path
                echo "The user : $username :  previously had $Mylocalfiles files in their local directory "
                echo "Amount of the files after restoration: "; find -type f| wc -l
                  
               break
               ;;
       
        "Quit")
        echo
        echo "Bye Bye"
        echo
        exit
        ;;
      *) echo invalid option;;
      esac
      done
   
 else
kill $pid
 
fi
done

